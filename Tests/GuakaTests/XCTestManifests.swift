#if !canImport(ObjectiveC)
import XCTest

extension ArgTokenTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgTokenTypeTests = [
        ("testItKnowsAboutFlags", testItKnowsAboutFlags),
        ("testItKnowsAboutFlagsThatNeedsValue", testItKnowsAboutFlagsThatNeedsValue),
        ("testItParsesInvalidFlags", testItParsesInvalidFlags),
        ("testItParsesLongFlag", testItParsesLongFlag),
        ("testItParsesLongFlagWithEqual", testItParsesLongFlagWithEqual),
        ("testItParsesMultiShortFlag", testItParsesMultiShortFlag),
        ("testItParsesMultiShortFlagWithEqual", testItParsesMultiShortFlagWithEqual),
        ("testItParsesPositionalArgs", testItParsesPositionalArgs),
        ("testItParsesShortFlag", testItParsesShortFlag),
        ("testItParsesShortFlagWithEqual", testItParsesShortFlagWithEqual),
        ("testItReturnsFlagName", testItReturnsFlagName),
    ]
}

extension CommandExecutionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommandExecutionTests = [
        ("testItCanExecuteRemoteCommand", testItCanExecuteRemoteCommand),
        ("testItCanExecuteShowCommand", testItCanExecuteShowCommand),
        ("testItCanExecuteShowCommandWithArgs", testItCanExecuteShowCommandWithArgs),
        ("testItCanGetCommandToExecute", testItCanGetCommandToExecute),
        ("testItCatchesExceptionsInExecution", testItCatchesExceptionsInExecution),
        ("testItCatchesRequiredFlagNotSet", testItCatchesRequiredFlagNotSet),
        ("testItCatchesTheCorrectAlias", testItCatchesTheCorrectAlias),
        ("testItCatchesTheCorrectAlias2", testItCatchesTheCorrectAlias2),
        ("testItCatchesTheHelp", testItCatchesTheHelp),
        ("testItCatchesTheHelpForTheCorrectAlias", testItCatchesTheHelpForTheCorrectAlias),
        ("testItCatchesTheHelpThatIsOverriden", testItCatchesTheHelpThatIsOverriden),
        ("testItItDoesNotPrintsFlagIfWeDidNotUseTheFlag", testItItDoesNotPrintsFlagIfWeDidNotUseTheFlag),
        ("testItItPrintsBothFlagAndCommandAreDeprecated", testItItPrintsBothFlagAndCommandAreDeprecated),
        ("testItPrintsThatCommandIsDeprecatedWhenExecutingCommand", testItPrintsThatCommandIsDeprecatedWhenExecutingCommand),
        ("testItPrintsThatFlagIsDeprecatedWhenExecutingCommand", testItPrintsThatFlagIsDeprecatedWhenExecutingCommand),
        ("testItShouldBotShowSuggestionIfDoesNotHaveSubcomamnds", testItShouldBotShowSuggestionIfDoesNotHaveSubcomamnds),
        ("testItShouldNotShowSuggestionIfFlagIsPassed", testItShouldNotShowSuggestionIfFlagIsPassed),
        ("testItShouldShowHelpIfHelpFlagIsPassedToWrongCommand", testItShouldShowHelpIfHelpFlagIsPassedToWrongCommand),
        ("testItSuggestsAlterntivesWhenNotMatchingFlags", testItSuggestsAlterntivesWhenNotMatchingFlags),
        ("testItSuggestsAlterntivesWhenNotMatchingNoFlags", testItSuggestsAlterntivesWhenNotMatchingNoFlags),
    ]
}

extension CommandHelpTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommandHelpTests = [
        ("testCommandThatHasGlobalFlags", testCommandThatHasGlobalFlags),
        ("testCommandThatHasLocalFlags", testCommandThatHasLocalFlags),
        ("testGeneratesFullName", testGeneratesFullName),
        ("testGeneratesFullUsage", testGeneratesFullUsage),
        ("testGeneratesFullUsageForCommandsWithUsage", testGeneratesFullUsageForCommandsWithUsage),
        ("testGeneratesFullUsageForCommandsWithUsageIfItHasAlias", testGeneratesFullUsageForCommandsWithUsageIfItHasAlias),
        ("testItCreatesACommandHelpFromACommandWithAliases", testItCreatesACommandHelpFromACommandWithAliases),
        ("testItCreatesACommandHelpFromACommandWithDeprecated", testItCreatesACommandHelpFromACommandWithDeprecated),
        ("testItCreatesACommandHelpFromACommandWithDescriptions", testItCreatesACommandHelpFromACommandWithDescriptions),
        ("testItCreatesACommandHelpFromACommandWithExample", testItCreatesACommandHelpFromACommandWithExample),
        ("testItCreatesACommandHelpFromACommandWithName", testItCreatesACommandHelpFromACommandWithName),
        ("testItCreatesACommandHelpFromACommandWithNoDescriptions", testItCreatesACommandHelpFromACommandWithNoDescriptions),
        ("testItCreatesACommandHelpFromACommandWithNoSubCommands", testItCreatesACommandHelpFromACommandWithNoSubCommands),
        ("testItCreatesACommandHelpFromACommandWithSubCommands", testItCreatesACommandHelpFromACommandWithSubCommands),
    ]
}

extension CommandParsingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommandParsingTests = [
        ("testItCanGetACommand1", testItCanGetACommand1),
        ("testItCanGetACommand10", testItCanGetACommand10),
        ("testItCanGetACommand11", testItCanGetACommand11),
        ("testItCanGetACommand12", testItCanGetACommand12),
        ("testItCanGetACommand13", testItCanGetACommand13),
        ("testItCanGetACommand2", testItCanGetACommand2),
        ("testItCanGetACommand3", testItCanGetACommand3),
        ("testItCanGetACommand4", testItCanGetACommand4),
        ("testItCanGetACommand5", testItCanGetACommand5),
        ("testItCanGetACommand6", testItCanGetACommand6),
        ("testItCanGetACommand7", testItCanGetACommand7),
        ("testItCanGetACommand8", testItCanGetACommand8),
        ("testItCanGetACommand9", testItCanGetACommand9),
        ("testItCanGetACommandEvenIfUsageIsLong", testItCanGetACommandEvenIfUsageIsLong),
        ("testItCanGetACommandWithMultipleArguments", testItCanGetACommandWithMultipleArguments),
    ]
}

extension CommandRunTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommandRunTests = [
        ("testIfInheritablePreRunFromParentReturnFalseItAltersExecution", testIfInheritablePreRunFromParentReturnFalseItAltersExecution),
        ("testIfInheritablePreRunReturnFalseItAltersExecution", testIfInheritablePreRunReturnFalseItAltersExecution),
        ("testIfItHasLotsOfRunsInheritablePreCanStopAllOfThem", testIfItHasLotsOfRunsInheritablePreCanStopAllOfThem),
        ("testIfItHasLotsOfRunsPreCanStopAllOfThemExceptInheritable", testIfItHasLotsOfRunsPreCanStopAllOfThemExceptInheritable),
        ("testIfPostRunReturnFalseItAltersExecutionAndInheritableIsNotCalled", testIfPostRunReturnFalseItAltersExecutionAndInheritableIsNotCalled),
        ("testItCallsPreRunPostInOrder", testItCallsPreRunPostInOrder),
        ("testItDoesNotCrashIfSomeRunsAreNotSet", testItDoesNotCrashIfSomeRunsAreNotSet),
        ("testItExecutesAllRuns", testItExecutesAllRuns),
        ("testItFindsTheInheritablePostRunFromCurrentCommandIfAvailable", testItFindsTheInheritablePostRunFromCurrentCommandIfAvailable),
        ("testItFindsTheInheritablePostRunFromGrandParentCommandIfAvailable", testItFindsTheInheritablePostRunFromGrandParentCommandIfAvailable),
        ("testItFindsTheInheritablePostRunFromParentCommandIfAvailable", testItFindsTheInheritablePostRunFromParentCommandIfAvailable),
        ("testItFindsTheInheritablePreRunFromCurrentCommandIfAvailable", testItFindsTheInheritablePreRunFromCurrentCommandIfAvailable),
        ("testItFindsTheInheritablePreRunFromGrandParentCommandIfAvailable", testItFindsTheInheritablePreRunFromGrandParentCommandIfAvailable),
        ("testItFindsTheInheritablePreRunFromParentCommandIfAvailable", testItFindsTheInheritablePreRunFromParentCommandIfAvailable),
        ("testItHandlesCasesWherThereAreNoInheritablePostRun", testItHandlesCasesWherThereAreNoInheritablePostRun),
        ("testItHandlesCasesWherThereAreNoInheritablePreRun", testItHandlesCasesWherThereAreNoInheritablePreRun),
        ("testItPreRunReturnFalseExecutionIsHalted", testItPreRunReturnFalseExecutionIsHalted),
        ("testItRunsInheritablePostRunAfterRun", testItRunsInheritablePostRunAfterRun),
        ("testItRunsInheritablePostRunParentAfterRun", testItRunsInheritablePostRunParentAfterRun),
        ("testItRunsInheritablePreRunBeforeRun", testItRunsInheritablePreRunBeforeRun),
        ("testItRunsInheritablePreRunFromParentBeforeRun", testItRunsInheritablePreRunFromParentBeforeRun),
        ("testItRunsPostRunAfterRun", testItRunsPostRunAfterRun),
        ("testItRunsPreRunBeforeRun", testItRunsPreRunBeforeRun),
        ("testReturingFalseFromPreStopsPostToo", testReturingFalseFromPreStopsPostToo),
    ]
}

extension CommandTest {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommandTest = [
        ("testItCanGenerateFlagSetForRoot", testItCanGenerateFlagSetForRoot),
        ("testItCanGenerateFlagSetSubCommand", testItCanGenerateFlagSetSubCommand),
        ("testItCanGenerateFlagSetSubCommandAndDoesOverride", testItCanGenerateFlagSetSubCommandAndDoesOverride),
        ("testItCanGetThePathOfACommand", testItCanGetThePathOfACommand),
        ("testItCanGetTheRoot", testItCanGetTheRoot),
    ]
}

extension CommandTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommandTests = [
        ("testItCanAddCommands", testItCanAddCommands),
        ("testItCanAddCommandsThroughParent", testItCanAddCommandsThroughParent),
        ("testItCanAddFlags", testItCanAddFlags),
        ("testItCanAddMultipleFlags", testItCanAddMultipleFlags),
        ("testItCanBeInitializedWith3Params", testItCanBeInitializedWith3Params),
        ("testItCanRemoveACommands", testItCanRemoveACommands),
        ("testItCanRemoveAFlag", testItCanRemoveAFlag),
        ("testItGetsNameForUsage", testItGetsNameForUsage),
        ("testItThrowsErrorForWrongUsage", testItThrowsErrorForWrongUsage),
    ]
}

extension CustomFlagTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CustomFlagTypesTests = [
        ("testItCanSetAFlagWithACustomType", testItCanSetAFlagWithACustomType),
        ("testItCanSetAFlagWithACustomTypeThatGeneratesAnError", testItCanSetAFlagWithACustomTypeThatGeneratesAnError),
        ("testItCanSetAFlagWithAnEnumWtihError", testItCanSetAFlagWithAnEnumWtihError),
        ("testItCanSetAFlagWithAnEnumWtihSuccess", testItCanSetAFlagWithAnEnumWtihSuccess),
    ]
}

extension ErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ErrorTests = [
        ("testItHelpInErrorCanBeReplaces", testItHelpInErrorCanBeReplaces),
        ("testItHelpInErrorCanBeReplacesCompletely", testItHelpInErrorCanBeReplacesCompletely),
        ("testItPrintsFlagNotFoundError", testItPrintsFlagNotFoundError),
        ("testItPrintsFlagNotFoundMessage", testItPrintsFlagNotFoundMessage),
        ("testItPrintsIncorrectFlagValueFoundErrorError", testItPrintsIncorrectFlagValueFoundErrorError),
        ("testItPrintsIncorrectFlagValueFoundErrorMessage", testItPrintsIncorrectFlagValueFoundErrorMessage),
    ]
}

extension FlagHelpTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FlagHelpTests = [
        ("testItGeneratesNamesWithDeprecationStatus", testItGeneratesNamesWithDeprecationStatus),
        ("testItGeneratesNamesWithDescription", testItGeneratesNamesWithDescription),
        ("testItGeneratesNamesWithIntValue", testItGeneratesNamesWithIntValue),
        ("testItGeneratesNamesWithLongName", testItGeneratesNamesWithLongName),
        ("testItGeneratesNamesWithRequiredFlags", testItGeneratesNamesWithRequiredFlags),
        ("testItGeneratesNamesWithRequiredFlagsThatWasSet", testItGeneratesNamesWithRequiredFlagsThatWasSet),
        ("testItGeneratesNamesWithShortName", testItGeneratesNamesWithShortName),
        ("testItGeneratesNamesWithThatWereChanged", testItGeneratesNamesWithThatWereChanged),
        ("testItGeneratesNamesWithValue", testItGeneratesNamesWithValue),
    ]
}

extension FlagSetTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FlagSetTests = [
        ("testAppendsHelpToFlagSet", testAppendsHelpToFlagSet),
        ("testItCanGetRequiredFlags1", testItCanGetRequiredFlags1),
        ("testItCanGetRequiredFlags2", testItCanGetRequiredFlags2),
        ("testItGetsDeafaultValueForPreparedFlags", testItGetsDeafaultValueForPreparedFlags),
        ("testItGetsPreparedFlags", testItGetsPreparedFlags),
        ("testItKnowsIfFlagIsBoolean", testItKnowsIfFlagIsBoolean),
        ("testItKnowsIfTokenIsSatisfied", testItKnowsIfTokenIsSatisfied),
        ("testItMakesSureAllRequiredFlagsAreSetWithError", testItMakesSureAllRequiredFlagsAreSetWithError),
        ("testItMakesSureAllRequiredFlagsAreSetWithErrorForMultipleFlags", testItMakesSureAllRequiredFlagsAreSetWithErrorForMultipleFlags),
        ("testItMakesSureAllRequiredFlagsAreSetWithErrorForMultipleFlagsEvenIfSomeAreSet", testItMakesSureAllRequiredFlagsAreSetWithErrorForMultipleFlagsEvenIfSomeAreSet),
        ("testItMakesSureAllRequiredFlagsAreSetWithSuccessIfFlagIsSet", testItMakesSureAllRequiredFlagsAreSetWithSuccessIfFlagIsSet),
        ("testItMakesSureAllRequiredFlagsAreSetWithSuccessIfMultipleFlagIsSet", testItMakesSureAllRequiredFlagsAreSetWithSuccessIfMultipleFlagIsSet),
        ("testItMakesSureAllRequiredFlagsAreSetWithSuccessIfNoRequiredFlags", testItMakesSureAllRequiredFlagsAreSetWithSuccessIfNoRequiredFlags),
        ("testItThrowsErrorForUnexpectedFlags", testItThrowsErrorForUnexpectedFlags),
    ]
}

extension FlagTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FlagTests = [
        ("testItCanPrintAFlagTable1ForGlobalFlags", testItCanPrintAFlagTable1ForGlobalFlags),
        ("testItCanPrintAFlagTable1ForLocalFlags", testItCanPrintAFlagTable1ForLocalFlags),
        ("testItCanPrintAFlagTable2ForGlobalFlags", testItCanPrintAFlagTable2ForGlobalFlags),
        ("testItCanPrintAFlagTable2ForLocalFlags", testItCanPrintAFlagTable2ForLocalFlags),
        ("testItCanPrintAFlagTableWithRequiredFlags", testItCanPrintAFlagTableWithRequiredFlags),
        ("testItGeneratesAPrintableDescription", testItGeneratesAPrintableDescription),
        ("testItGeneratesAPrintableNameForNonRequiredFlagsWithDesc", testItGeneratesAPrintableNameForNonRequiredFlagsWithDesc),
        ("testItGeneratesAPrintableNameForRequiredFlagsWithDesc", testItGeneratesAPrintableNameForRequiredFlagsWithDesc),
        ("testItGeneratesAPrintableNameForRequiredFlagsWithtoutDesc", testItGeneratesAPrintableNameForRequiredFlagsWithtoutDesc),
        ("testItGeneratesAPrintableNameWithLongNameAndDescription", testItGeneratesAPrintableNameWithLongNameAndDescription),
        ("testItGeneratesAPrintableNameWithLongNameAndDescriptionAndShortName", testItGeneratesAPrintableNameWithLongNameAndDescriptionAndShortName),
        ("testItTestsLongFlagName", testItTestsLongFlagName),
        ("testItTestsShortFlagName", testItTestsShortFlagName),
    ]
}

extension FlagsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FlagsTests = [
        ("testItGetsAFlag", testItGetsAFlag),
        ("testItGetsAFlagValue", testItGetsAFlagValue),
        ("testItGetsAFlagValueForAType", testItGetsAFlagValueForAType),
        ("testItHandlesBadFlagNames", testItHandlesBadFlagNames),
        ("testItHandlesBadFlagType", testItHandlesBadFlagType),
        ("testItReuturnBool", testItReuturnBool),
        ("testItReuturnInt", testItReuturnInt),
        ("testItReuturnString", testItReuturnString),
    ]
}

extension HelpGeneratorSubclassingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HelpGeneratorSubclassingTests = [
        ("testCanOverrideAliasSection", testCanOverrideAliasSection),
        ("testCanOverrideAllSection", testCanOverrideAllSection),
        ("testCanOverrideCommandDescriptionSection", testCanOverrideCommandDescriptionSection),
        ("testCanOverrideCommandsSection", testCanOverrideCommandsSection),
        ("testCanOverrideDeprecationSection", testCanOverrideDeprecationSection),
        ("testCanOverrideErrorSection", testCanOverrideErrorSection),
        ("testCanOverrideExampleSection", testCanOverrideExampleSection),
        ("testCanOverrideFlagDeprecation", testCanOverrideFlagDeprecation),
        ("testCanOverrideFlagsSection", testCanOverrideFlagsSection),
        ("testCanOverrideHelpSection", testCanOverrideHelpSection),
        ("testCanOverrideInformationSection", testCanOverrideInformationSection),
        ("testCanOverrideUsageSection", testCanOverrideUsageSection),
    ]
}

extension HelpGeneratorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HelpGeneratorTests = [
        ("testItGeneratesAliasesSection", testItGeneratesAliasesSection),
        ("testItGeneratesCommandsDescriptionSection", testItGeneratesCommandsDescriptionSection),
        ("testItGeneratesCommandsSection", testItGeneratesCommandsSection),
        ("testItGeneratesErrorDeprecationMessage", testItGeneratesErrorDeprecationMessage),
        ("testItGeneratesErrorDeprecationMessageWhenAlias", testItGeneratesErrorDeprecationMessageWhenAlias),
        ("testItGeneratesErrorHelpSection", testItGeneratesErrorHelpSection),
        ("testItGeneratesErrorUsageSection", testItGeneratesErrorUsageSection),
        ("testItGeneratesExampleSection", testItGeneratesExampleSection),
        ("testItGeneratesFlagDeprecationMessage", testItGeneratesFlagDeprecationMessage),
        ("testItGeneratesFlagsSection", testItGeneratesFlagsSection),
        ("testItGeneratesHelpSection", testItGeneratesHelpSection),
        ("testItGeneratesInformationSection", testItGeneratesInformationSection),
    ]
}

extension HelpTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HelpTests = [
        ("testCanReplaceTheHelpGeneratorForHelp", testCanReplaceTheHelpGeneratorForHelp),
        ("testIfAllFlagsAreDeprecatedItDoesNotShowFlags", testIfAllFlagsAreDeprecatedItDoesNotShowFlags),
        ("testItCanGenerateTheCommandsSectionWithoutUsages", testItCanGenerateTheCommandsSectionWithoutUsages),
        ("testItCanGenerateTheCommandsSectionWithshortMessages", testItCanGenerateTheCommandsSectionWithshortMessages),
        ("testItCanGenerateTheUsageMessage", testItCanGenerateTheUsageMessage),
        ("testItDoesNotPrintFlagsIfCommandHaveZeroFlags", testItDoesNotPrintFlagsIfCommandHaveZeroFlags),
        ("testItDoesNotShowDeprecatedCommands", testItDoesNotShowDeprecatedCommands),
        ("testItFiltersOutDeprecatedFlags", testItFiltersOutDeprecatedFlags),
        ("testItGenerateTheDescriptionSectionWithLongAndshortMessage", testItGenerateTheDescriptionSectionWithLongAndshortMessage),
        ("testItGenerateTheDescriptionSectionWithlongMessage", testItGenerateTheDescriptionSectionWithlongMessage),
        ("testItGenerateTheDescriptionSectionWithoutUsage", testItGenerateTheDescriptionSectionWithoutUsage),
        ("testItGenerateTheDescriptionSectionWithshortMessage", testItGenerateTheDescriptionSectionWithshortMessage),
        ("testItGenerateTheFlagsSection", testItGenerateTheFlagsSection),
        ("testItGenerateTheFullHelp", testItGenerateTheFullHelp),
        ("testItGenerateTheFullHelpEvenIfRequiredFlagsAreMissing", testItGenerateTheFullHelpEvenIfRequiredFlagsAreMissing),
        ("testItPrintsCommandDeprecatedOnTopOfDeprecatedCommand", testItPrintsCommandDeprecatedOnTopOfDeprecatedCommand),
        ("testItPrintsHelpForAliases", testItPrintsHelpForAliases),
        ("testItPrintsTheExample", testItPrintsTheExample),
        ("testItPrintsTheUsageSection", testItPrintsTheUsageSection),
        ("testItPrintsTheUsageSectionWhenAnAliasIsUsed", testItPrintsTheUsageSectionWhenAnAliasIsUsed),
        ("testNoFlagsNoCommands", testNoFlagsNoCommands),
    ]
}

extension LevenshteinTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LevenshteinTests = [
        ("testItCalculatesLevenshteinDistance", testItCalculatesLevenshteinDistance),
        ("testItCalculatesLevenshteinShortestDistance", testItCalculatesLevenshteinShortestDistance),
    ]
}

extension ParsingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParsingTests = [
        ("testANonBoolShortFlagWillSwallowTheOutput", testANonBoolShortFlagWillSwallowTheOutput),
        ("testANonBoolShortFlagWillSwallowTheOutputAndConvertsIt", testANonBoolShortFlagWillSwallowTheOutputAndConvertsIt),
        ("testANonBoolShortFlagWillSwallowTheOutputAndConvertsIt2", testANonBoolShortFlagWillSwallowTheOutputAndConvertsIt2),
        ("testANonBoolShortFlagWillSwallowTheOutputAndConvertsItAndThrowErrorIfCannotConvert", testANonBoolShortFlagWillSwallowTheOutputAndConvertsItAndThrowErrorIfCannotConvert),
        ("testItCatchesFlagsThatNeedValue", testItCatchesFlagsThatNeedValue),
        ("testItCatchesLastFlagsThatNeedValue", testItCatchesLastFlagsThatNeedValue),
        ("testItCatchesWrongFlags", testItCatchesWrongFlags),
        ("testItGetsPositionalArguments", testItGetsPositionalArguments),
        ("testItParseMultipleBoolFlags", testItParseMultipleBoolFlags),
        ("testItParseMultipleBoolFlagsWithEqual", testItParseMultipleBoolFlagsWithEqual),
        ("testItParseMultipleBoolFlagsWithEqualAndPending", testItParseMultipleBoolFlagsWithEqualAndPending),
        ("testItParseMultipleBoolFlagsWithEqualAndPendingWillThrowIfUnsatisfied", testItParseMultipleBoolFlagsWithEqualAndPendingWillThrowIfUnsatisfied),
        ("testItParsesBooleanLongAndShortFlagsWithNoArguments", testItParsesBooleanLongAndShortFlagsWithNoArguments),
        ("testItParsesLongUnsatisfiedFlag", testItParsesLongUnsatisfiedFlag),
        ("testItParsesLongWithEqual", testItParsesLongWithEqual),
        ("testItParsesRepeatableAndSingleFlags", testItParsesRepeatableAndSingleFlags),
        ("testItParsesRepeatableFlags", testItParsesRepeatableFlags),
        ("testItParsesShortFlag", testItParsesShortFlag),
        ("testItParsesShortUnsatisfiedFlag", testItParsesShortUnsatisfiedFlag),
    ]
}

extension ValidationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValidationTests = [
        ("testValidateCommandWithFlagsWithWrongLongName", testValidateCommandWithFlagsWithWrongLongName),
        ("testValidateCommandWithFlagsWithWrongShortName", testValidateCommandWithFlagsWithWrongShortName),
        ("testValidateEmptyName", testValidateEmptyName),
        ("testValidateSubCommandWithWrongName", testValidateSubCommandWithWrongName),
        ("testValidateWrongName", testValidateWrongName),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArgTokenTypeTests.__allTests__ArgTokenTypeTests),
        testCase(CommandExecutionTests.__allTests__CommandExecutionTests),
        testCase(CommandHelpTests.__allTests__CommandHelpTests),
        testCase(CommandParsingTests.__allTests__CommandParsingTests),
        testCase(CommandRunTests.__allTests__CommandRunTests),
        testCase(CommandTest.__allTests__CommandTest),
        testCase(CommandTests.__allTests__CommandTests),
        testCase(CustomFlagTypesTests.__allTests__CustomFlagTypesTests),
        testCase(ErrorTests.__allTests__ErrorTests),
        testCase(FlagHelpTests.__allTests__FlagHelpTests),
        testCase(FlagSetTests.__allTests__FlagSetTests),
        testCase(FlagTests.__allTests__FlagTests),
        testCase(FlagsTests.__allTests__FlagsTests),
        testCase(HelpGeneratorSubclassingTests.__allTests__HelpGeneratorSubclassingTests),
        testCase(HelpGeneratorTests.__allTests__HelpGeneratorTests),
        testCase(HelpTests.__allTests__HelpTests),
        testCase(LevenshteinTests.__allTests__LevenshteinTests),
        testCase(ParsingTests.__allTests__ParsingTests),
        testCase(ValidationTests.__allTests__ValidationTests),
    ]
}
#endif
